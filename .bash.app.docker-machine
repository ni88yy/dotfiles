#! /bin/bash

docker-clean () {
    docker stop `docker ps --format "{{.Names}}"`
    docker rm `docker ps -a --format "{{.ID}}"`
}

docker-clean-i() {
    docker rmi $(docker images | grep "^<none>" | awk "{print $3}")
}

docker-init ()
{
    name=${1:-default}
    docker-machine start $name >> /dev/null
    eval "$(docker-machine env $name)"
    update-docker-hosts
}

update-docker-hosts(){
    # iterate over each machine
    docker-machine ls | tail -n +2 | awk '{print $1}' | while read -r MACHINE; do
        MACHINE_IP="$(docker-machine ip ${MACHINE} 2>/dev/null)"
        MACHINE_DOCKER="${MACHINE}.docker"
        ETC_HOSTS_LINE="$MACHINE_IP $MACHINE_DOCKER"
        echo "$ETC_HOSTS_LINE"
        # find existing host line in /etc/hosts; if there do nothing
        if ! grep -q $ETC_HOSTS_LINE /etc/hosts 2>/dev/null; then
            # otherwise remove old docker machine if it exists, and ad new one
            sudo sed -i '' "/.*${MACHINE_DOCKER}/d" /etc/hosts
            [[ -n $MACHINE_IP ]] && sudo /bin/bash -c "echo \"${ETC_HOSTS_LINE}\" >> /etc/hosts"
            export no_proxy=$no_proxy,$MACHINE_IP
        fi
    done
}

_cli_bash_autocomplete() {
     local cur prev opts base
     COMPREPLY=()
     cur="${COMP_WORDS[COMP_CWORD]}"
     prev="${COMP_WORDS[COMP_CWORD-1]}"
     opts=$( ${COMP_WORDS[@]:0:$COMP_CWORD} --generate-bash-completion )
     COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
     return 0
 }
  
 complete -F _cli_bash_autocomplete docker-machine
